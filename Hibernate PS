Hibernate Ps1


                  Problem Statement 1 – Hibernate 

              Katakam Hemanth Kumar - 2604566
                                 
                            MLA JAVA237SM

----------------------------------------------------------------------------------------------------

pom.xml

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
 <modelVersion>4.0.0</modelVersion> 
 <groupId>com.hibernate</groupId> 
 <artifactId>Day_1_HibernateUsingXML_PracticeExercise</artifactId> 
 <version>0.0.1-SNAPSHOT</version> 
 <name>PracticeExerciseXML</name> 
 <dependencies>
<dependency>
<groupId>org.hibernate</groupId>
<artifactId>hibernate-core</artifactId>
<version>5.6.5.Final</version>
</dependency>
<dependency>
<groupId>mysql</groupId>
<artifactId>mysql-connector-java</artifactId>
<version>8.0.20</version>
</dependency>
</dependencies>
</project>
 



hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC   
  "-//Hibernate/Hibernate Configuration DTD 5.3//EN"   
  "http://hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
<session-factory>
<property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property>
<property name="connection.url">jdbc:mysql://localhost:3306/productdbs?useSSL=false&amp;serverTimezone=UTC</property>
<property name="connection.username">root</property>
<property name="connection.password">Password@12</property>
<property name="connection.pool_size">5</property>
<property name="dialect">org.hibernate.dialect.MySQL8Dialect</property>
<property name="hibernate.hbm2ddl.auto">update</property>
<property name="current_session_context_class">thread</property>
<mapping resource = "product.hbm.xml"/>   
</session-factory>
</hibernate-configuration>
 

product.hbm.xml

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
"-//Hibernate/Hibernate Mapping DTD//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
<class name="com.mphasis.domain.Product" table="products">
<id name="productId" type="java.lang.String">
<column name="pdct_Id"/>
<generator class="assigned"/>
</id>
<property name="productName" type="java.lang.String">
<column name="pdct_Name"/>
</property>
<property name="productPrice" type="double">
<column name="pdct_Price"/>
</property>
</class>
</hibernate-mapping>
 

Product.java

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
"-//Hibernate/Hibernate Mapping DTD//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
<class name="com.mphasis.domain.Product" table="products">
<id name="productId" type="java.lang.String">
<column name="pdct_Id"/>
<generator class="assigned"/>
</id>
<property name="productName" type="java.lang.String">
<column name="pdct_Name"/>
</property>
<property name="productPrice" type="double">
<column name="pdct_Price"/>
</property>
</class>
</hibernate-mapping>
 
HibernateUtil.java

package com.mphasis.dbutil;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import com.mphasis.domain.Product;
public class HibernateUtil {
private static SessionFactory factory;
public static SessionFactory getSessionFactory() {
if(factory == null) {
factory = new Configuration()
.configure("hibernate.cfg.xml")
.addAnnotatedClass(Product.class)
.buildSessionFactory();
}
return factory;
} }
 
productManagementDAO.java

package com.mphasis.dao;
import java.util.List; 
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import com.mphasis.dbutil.HibernateUtil;
import com.mphasis.domain.Product;

public class ProductManagementDAO {
SessionFactory factory = HibernateUtil.getSessionFactory();
public void getAllRecords() {
Session session = factory.openSession();
session.beginTransaction();
List<Product> results = session.createQuery("FROM Product").getResultList();
if(results.size() > 0) {
for(Product p: results) {
System.out.println("Product Id: " + p.getProductId());
System.out.println("Product Name: " + p.getProductName());
System.out.println("Product Price: " + p.getProductPrice());
System.out.println();
}
}
else {
System.out.println("No records found insert products");
}
session.getTransaction().commit();
session.close();
}
 
public boolean insertRecord(Product p) {
try {
Session session = factory.openSession();
session.beginTransaction();
session.save(p);
session.getTransaction().commit();
session.close();
return true;
}
catch(Exception e) {
System.out.println("Product not added");
}
return false;
}
 
public boolean updateRecord(String prdId, String prdName, double prdPrice) {
try {
Session session = factory.openSession();
session.beginTransaction();
Product p = session.get(Product.class, prdId);
p.setProductName(prdName);
p.setProductPrice(prdPrice);
session.saveOrUpdate(p);
session.getTransaction().commit();
session.close();
return true;
}
catch(Exception e) {
System.out.println("Product not found to update");
}
return false;
}
public boolean deleteRecord(String prdId) {
try {
Session session = factory.openSession();
session.beginTransaction();
Product p = session.get(Product.class, prdId);
session.delete(p);
session.getTransaction().commit();
session.close();
return true;
}
catch(Exception e) {
System.out.println("Product not found to delete");
}
return false;
} 
public void searchRecord(String prdId) {
try {
Session session = factory.openSession();
session.beginTransaction();
Product p = session.get(Product.class, prdId);
System.out.println("Product Id: " + p.getProductId());
System.out.println("Product Name: "  +p.getProductName());
System.out.println("Product Price: " + p.getProductPrice());
session.close();
}
catch(Exception e) {
System.out.println("Product not found");
} } } 


ProductManagementApp.java

package com.mphasis.dao;
import java.util.List; 
import org.hibernate.Session;
import org.hibernate.SessionFactory;
 
import com.mphasis.dbutil.HibernateUtil;
import com.mphasis.domain.Product;
 
public class ProductManagementDAO {
 
SessionFactory factory = HibernateUtil.getSessionFactory();
 
public void getAllRecords() {
Session session = factory.openSession();
session.beginTransaction();
List<Product> results = session.createQuery("FROM Product").getResultList();
if(results.size() > 0) {
for(Product p: results) {
System.out.println("Product Id: " + p.getProductId());
System.out.println("Product Name: " + p.getProductName());
System.out.println("Product Price: " + p.getProductPrice());
System.out.println();
}
}
else {
System.out.println("No records found insert products");
}
session.getTransaction().commit();
session.close();
}
 
public boolean insertRecord(Product p) {
try {
Session session = factory.openSession();
session.beginTransaction();
session.save(p);
session.getTransaction().commit();
session.close();
return true;
}
catch(Exception e) {
System.out.println("Product not added");
}
return false;
}
 
public boolean updateRecord(String prdId, String prdName, double prdPrice) {
try {
Session session = factory.openSession();
session.beginTransaction();
Product p = session.get(Product.class, prdId);
p.setProductName(prdName);
p.setProductPrice(prdPrice);
session.saveOrUpdate(p);
session.getTransaction().commit();
session.close();
return true;
}
catch(Exception e) {
System.out.println("Product not found to update");
}
return false;
}
 
public boolean deleteRecord(String prdId) {
try {
Session session = factory.openSession();
session.beginTransaction();
Product p = session.get(Product.class, prdId);
session.delete(p);
session.getTransaction().commit();
session.close();
return true;
}
catch(Exception e) {
System.out.println("Product not found to delete");
}
return false;
}
 
public void searchRecord(String prdId) {
try {
Session session = factory.openSession();
session.beginTransaction();
Product p = session.get(Product.class, prdId);
System.out.println("Product Id: " + p.getProductId());
System.out.println("Product Name: "  +p.getProductName());
System.out.println("Product Price: " + p.getProductPrice());
session.close();
}
catch(Exception e) {
System.out.println("Product not found");
}
}
} 
 
---------------------------------------------------------------------------------------------------------------------

Hibernate PS-2


                     Problem Statement 2 – Hibernate 

                 Katakam Hemanth Kumar - 2604566
                                 
                              MLA JAVA237SM
----------------------------------------------------------------------------------------------------

Hibernate.cfg.xml

<session-factory> 
<property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property> 
<!-- property name="connection.driver_class">com.mysql.jdbc.Driver</property --> 
<property name="connection.url">jdbc:mysql://localhost:3306/productdb?useSSL=false&amp;serverTimezone=UTC</property>
<property name="dialect">org.hibernate.dialect.MySQL8Dialect</property> 
<property name="connection.username">root</property> 
<property name="connection.password">Password@12</property> 
<property name="connection.pool_size">5</property>
<!-- >property name="dialect">org.hibernate.dialect.MySQLDialect</property-->
<property name="current_session_context_class">thread</property> 
<property name="show_sql">true</property> 
<property name="format_sql">true</property> 
<property name="hbm2ddl.auto">update</property> 
<!-- mapping class="com.mcnz.jpa.examples.Player" / --> 
</session-factory>
 
Pom.xml
<dependencies>
<!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
<dependency>
<groupId>org.hibernate</groupId>
<artifactId>hibernate-core</artifactId>
<version>5.6.5.Final</version>
</dependency>
 
<dependency>
<groupId>com.mysql</groupId>
<artifactId>mysql-connector-j</artifactId>
<version>8.1.0</version>
</dependency>
</dependencies>
 
Product.java
package com.mphasis.domain;
import javax.persistence.Entity;
import javax.persistence.*;
@Entity
public class product {
@Id
@GeneratedValue(strategy=GenerationType.IDENTITY)
@Column(name="product_id")
private int id;
@Column(name="product_name")
private String name;
@Column(name="product_price")
private double price;
public product() {
}
public product(String name, double price) {
super();
this.name = name;
this.price = price;
}
public int getId() {
return id;
}
 
public String getName() {
return name;
}
public double getPrice() {
return price;
}
public void setId(int id) {
this.id = id;
}
public void setName(String name) {
this.name = name;
}
public void setPrice(double price) {
this.price = price;
}
@Override
public String toString() {
return "Product [id=" + id + ", name=" + name + ", price=" + price + "]";
} 
}


HibernateUtil.java
package com.mphasis.dbutil;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration; 
import com.mphasis.domain.product;
public class HibernateUtil {
private static SessionFactory factory;
public static SessionFactory getSessionFactory() {
if(factory==null)
{
factory=new Configuration() 
 .configure("hibernate.cfg.xml")
.buildSessionFactory();
 
}
return factory;
}
public static void close()
{
factory.close();
}
 
}



ProductmanagementDAO.java

package com.mphasis.dao;
import java.util.List; 
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.query.Query;
import com.mphasis.dbutil.HibernateUtil;
import com.mphasis.domain.product;
public class ProductManagementDAO {
public void AddProduct(product p)
{SessionFactory factory=HibernateUtil.getSessionFactory();
try {
Session session=factory.openSession();
session.beginTransaction();
session.save(p);
session.getTransaction().commit();
session.close();
}
finally {
//HibernateUtil.close();
}
 
}
public void UpdateProduct(int id,String name,double price)
{SessionFactory factory=HibernateUtil.getSessionFactory();
try
{
Session session=factory.openSession();
session.beginTransaction();
product update=session.get(product.class, id);
//update.setId(id);
update.setName(name);
update.setPrice(price);
session.saveOrUpdate(update);
session.getTransaction().commit();
session.close();
}
finally {
//HibernateUtil.close();
}
}
public void DeleteProduct(int id)
{SessionFactory factory=HibernateUtil.getSessionFactory();
try
{
Session session=factory.openSession();
session.beginTransaction();
product delete=session.get(product.class, id);
session.delete(delete);
session.getTransaction().commit();
session.close();
}
finally
{
//HibernateUtil.close();
}
}
public boolean Searchproduct(int id)
{
SessionFactory factory=HibernateUtil.getSessionFactory();
try
{
Session session=factory.openSession();
session.beginTransaction();
product search=session.get(product.class, id);
session.getTransaction().commit();
session.close();
if(search!=null)
return true;
else
return false;
}
finally
{
//HibernateUtil.close();
}
}
public void ViewProducts()
{
SessionFactory factory=HibernateUtil.getSessionFactory();
try
{
Session session=factory.openSession();
String hql="from product";
Query<product> qry=session.createQuery(hql,product.class);
List<product> list=qry.getResultList();
for(product p:list)
System.out.println(p);
 
 
}
finally
{
//HibernateUtil.close();
}
} 
}


ProductManagementApp.java

package com.mphasis.app; 
 
import java.util.InputMismatchException;
import java.util.Scanner; 
 
import com.mphasis.dao.ProductManagementDAO;
import com.mphasis.dbutil.HibernateUtil;
import com.mphasis.domain.product; 
 
public class ProductManagementApp {
private static final Scanner scanner = new Scanner (System.in);
private static final ProductManagementDAO dao = new ProductManagementDAO();
public static void main(String[] args) {
// TODO Auto-generated method stub
while (true) {
System.out.println("Product Management Application");
System.out.println("1. View Products");
System.out.println("2. Add Product");
System.out.println("3. Update Product");
System.out.println("4. Delete Product");
System.out.println("5. Search Product");
System.out.println("6. Exit");
System.out.print("Choose an option: ");
int choice;
try {
choice = scanner.nextInt();
scanner.nextLine(); // consume newline
switch (choice) {
case 1:
viewProducts();
break;
case 2:
addProduct();
break;
case 3:
updateProduct();
break;
case 4:
deleteProduct();
break;
case 5:
searchProduct();
break;
case 6:
HibernateUtil.close();
System.out.println("Exiting...");
System.exit(0);
default:
System.out.println("Invalid option. Please try again.");
}
} catch (InputMismatchException e) {
System.out.println("Invalid input. Please enter a number.");
scanner.nextLine(); // consume invalid input
} } }
 
private static void viewProducts() { 
               dao.ViewProducts();
}
private static void addProduct() {
System.out.print("Enter product name: ");
String name = scanner.nextLine();
System.out.print("Enter product price: ");
double price = scanner.nextDouble();
scanner.nextLine();  
product product = new product(name, price);
dao.AddProduct(product);
System.out.println("Product added successfully.");
}
 
 
private static void updateProduct()  {
System.out.print("Enter product ID to update: ");
int id = scanner.nextInt();
scanner.nextLine();  
boolean exists = dao.Searchproduct(id);
if (exists == false) {
System.out.println("Product not found.");
return;
}
System.out.print("Enter new product name: ");
String name = scanner.nextLine();
System.out.print("Enter new product price: ");
double price = scanner.nextDouble();
scanner.nextLine();  
dao.UpdateProduct(id,name,price);
System.out.println("Product updated successfully.");
}
 
 
private static void deleteProduct() {
System.out.print("Enter product ID to delete: ");
int id = scanner.nextInt();
scanner.nextLine();  
dao.DeleteProduct(id);
System.out.println("Product deleted successfully.");
}
 
 
 
private static void searchProduct() {
System.out.print("Enter product ID to search: ");
int id = scanner.nextInt();
scanner.nextLine();  
boolean search = dao.Searchproduct(id);
if (search == false) {
System.out.println("Product not found.");
} else {
System.out.println("Product found");
} 
}
}
 


SQL Commands

create database productdb;  
     use productdb;  
     CREATE TABLE product (  
     product_id INT AUTO_INCREMENT PRIMARY KEY,  
     product_name VARCHAR (255) NOT NULL,  
     product_price DECIMAL (10, 2) NOT NULL  
    );  
    select * from product; 








