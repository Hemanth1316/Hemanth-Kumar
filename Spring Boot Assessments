PS _ 4

Configuring Spring Boot Actuator Endpoints â€“ Product ready services 

Application.properties 
spring.application.name=PractiseQue3 
spring.datasource.url=jdbc:mysql://localhost:3306/book 
spring.datasource.username=root 
spring.datasource.password=Password@12 
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver 
spring.jpa.hibernate.ddl-auto=update 
spring.jpa.show-sql=true 
server.port=8090 
management.endpoints.web.exposure.include=* 

Book_details.java 
package com.mph.PractiseQue3; 
import jakarta.persistence.Entity; 
import jakarta.persistence.Id; 
@Entity 
public class Book_Details { 
@Id 
private int id; 
private String title; 
private String publisher; 
private String isbn; 
private String pages; 
private String year; 
public Book_Details() { 
 
} 
public int getId() { 
return id; 
} 
public void setId(int id) { 
this.id = id; 
} 
public String getTitle() { 
return title; 
} 
public void setTitle(String title) { 
this.title = title; 
} 
public String getPublisher() { 
return publisher; 
} 
public void setPublisher(String publisher) { 
this.publisher = publisher; 
} 
public String getIsbn() { 
return isbn; 
} 
public void setIsbn(String isbn) { 
this.isbn = isbn; 
} 
public String getYear() { 
return year; 
} 
public void setYear(String year) { 
this.year = year; 
} 
public String getPages() { 
return pages; 
} 
public void setPages(String pages) { 
this.pages = pages; 
} 
@Override 
public String toString() { 
return "Book_Details [id=" + id + ", title=" + title + ", publisher=" + publisher + ", isbn=" + isbn + ", pages=" 
+ pages + ", year=" + year + "]"; 
}  
  
} 


BookRepository.java 
package com.mph.PractiseQue3; 
 
import org.springframework.data.jpa.repository.JpaRepository; 
 
public interface BookRepository extends JpaRepository<Book_Details, Integer> { 
 
} 


AddBook.html 
<!DOCTYPE html> 
<html xmlns:th="http://www.thymleaf.org"> 
<head> 
<meta charset="ISO-8859-1"> 
<title>Add Book</title> 
</head> 
<body> 
<form action="#" th:action="@{/addBook}" th:object="${bookDetails}" method="post"> 
<label for="id">Id:</label> 
<input type="text" id="id" th:field="*{id}"/><br/> 
<label for="title">Title:</label> 
<input type="text" id="title" th:field="*{title}" /><br/> 
<label for="publisher">Publisher:</label> 
<input type="text" id="publisher" th:field="*{publisher}" /><br/> 
<label for="isbn">Isbn:</label> 
<input type="text" id="isbn" th:field="*{isbn}" /><br/> 
<label for="pages">Pages:</label> 
<input type="text" id="pages" th:field="*{pages}" /><br/> 
<label for="year">Year:</label> 
<input type="number" id="year" th:field="*{year}" /><br/> 
<button type="submit">Add Book</button> 
</form> 
</body> 
</html> 

 
ListBooks.html 
<!DOCTYPE html> 
<html xmlns:th="http://www.thymeleaf.org"> 
<head> 
<title>Book List</title> 
</head> 
<body> 
<h1>Book List</h1> 
<table border="1"> 
<tr> 
<th>Id</th> 
<th>Title</th> 
<th>Publisher</th> 
<th>Isbn</th> 
<th>Pages</th> 
<th>Year</th> 
<th>Edit</th> 
<th>Delete</th> 
</tr> 
<tbody> 
<tr th:each="book : ${books}"> 
<td th:text="${book.id}"></td> 
<td th:text="${book.title}"></td>  
<td th:text="${book.publisher}"></td> 
<td th:text="${book.isbn}"></td> 
<td th:text="${book.pages}"></td> 
<td th:text="${book.year}"></td> 
<td><a th:href="@{/editBook/{id}(id=${book.id})}">Edit</a></td> 
<td> <a th:href="@{/deleteBook/{id}(id=${book.id})}">Delete</a></td> 
</tr> 
</tbody> 
</table> 
</body> 
</html> 
 
UpdateBook.html 
<!DOCTYPE html> 
<html xmlns:th="http://www.thymeleaf.org"> 
<head> 
<title>Edit Book</title> 
</head> 
<body> 
<h1>Edit Book</h1> 
<form action="#" th:action="@{/editBook}" th:object="${bookDetails}" method="post"> 
<input type="hidden" th:field="*{id}" /> 
<label for="title">Title:</label> 
<input type="text" id="title" th:field="*{title}" /><br/> 
<label for="publisher">Publisher:</label> 
<input type="text" id="publisher" th:field="*{publisher}" /><br/> 
<label for="isbn">Isbn:</label> 
<input type="text" id="isbn" th:field="*{isbn}" /><br/> 
<label for="pages">Pages:</label> 
<input type="text" id="pages" th:field="*{pages}" /><br/> 
<label for="year">Year:</label> 
<input type="number" id="year" th:field="*{year}" /><br/> 
<button type="submit">Update Book</button> 
</form> 
</body> 
</html> 
 

BookController.java 

package com.mph.PractiseQue3; 
import org.springframework.beans.factory.annotation.Autowired; 
import org.springframework.stereotype.Controller; 
import org.springframework.ui.Model; 
import org.springframework.web.bind.annotation.GetMapping; 
import org.springframework.web.bind.annotation.ModelAttribute; 
import org.springframework.web.bind.annotation.PathVariable; 
import org.springframework.web.bind.annotation.PostMapping; 
 
@Controller 
public class BookController { 
@Autowired 
private BookRepository repo; 
@GetMapping("/addbook") 
public String addbookform(Model model) { 
model.addAttribute("bookDetails", new Book_Details()); 
return "AddBook"; 
} 
 
@PostMapping("/addBook") 
public String addBook(@ModelAttribute Book_Details bookDetails) { 
repo.save(bookDetails); 
return "redirect:/books"; 
} 
 
@GetMapping("/books") 
public String listBooks(Model model) { 
model.addAttribute("books", repo.findAll()); 
return "ListBooks"; 
} 
@GetMapping("/editBook/{id}") 
public String showEditBookForm(@PathVariable("id") int id, Model model) { 
Book_Details bookDetails = repo.findById(id).orElseThrow(() -> new IllegalArgumentException("Invalid book Id:" + id)); 
model.addAttribute("bookDetails", bookDetails); 
return "UpdateBook"; 
} 
 
@PostMapping("/editBook") 
public String editBook(@ModelAttribute Book_Details bookDetails) { 
repo.save(bookDetails); 
return "redirect:/books"; 
} 
 
@GetMapping("/deleteBook/{id}") 
public String deleteBook(@PathVariable("id") int id) { 
Book_Details bookDetails = repo.findById(id).orElseThrow(() -> new IllegalArgumentException("Invalid book Id:" + id)); 
repo.delete(bookDetails); 
return "redirect:/books"; 
} 
} 

pom.xml 
<dependency> 
<groupId>org.springframework.boot</groupId> 
<artifactId>spring-boot-starter-actuator</artifactId> 
</dependency> 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


PS -3

 
Create View Layer with Spring Boot Thymeleaf
Application.properties
spring.application.name=PractiseQue3
spring.datasource.url=jdbc:mysql://localhost:3306/book
spring.datasource.username=root
spring.datasource.password=Password@12
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
server.port=8090
 
Book_details.java
package com.mph.PractiseQue3; 
import jakarta.persistence.Entity;
import jakarta.persistence.Id; 
 
@Entity
public class Book_Details {
@Id
private int id;
private String title;
private String publisher;
private String isbn;
private String pages;
private String year;
public Book_Details() {
 
}
public int getId() {
return id;
}
public void setId(int id) {
this.id = id;
}
public String getTitle() {
return title;
}
public void setTitle(String title) {
this.title = title;
}
public String getPublisher() {
return publisher;
}
public void setPublisher(String publisher) {
this.publisher = publisher;
}
public String getIsbn() {
return isbn;
}
public void setIsbn(String isbn) {
this.isbn = isbn;
}
public String getYear() {
return year;
}
public void setYear(String year) {
this.year = year;
}
public String getPages() {
return pages;
}
public void setPages(String pages) {
this.pages = pages;
}
@Override
public String toString() {
return "Book_Details [id=" + id + ", title=" + title + ", publisher=" + publisher + ", isbn=" + isbn + ", pages="
+ pages + ", year=" + year + "]";
}  
}

BookRepository.java
package com.mph.PractiseQue3;
import org.springframework.data.jpa.repository.JpaRepository;
public interface BookRepository extends JpaRepository<Book_Details, Integer> {
}

AddBook.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymleaf.org">
<head>
<meta charset="ISO-8859-1">
<title>Add Book</title>
</head>
<body>
<form action="#" th:action="@{/addBook}" th:object="${bookDetails}" method="post">
<label for="id">Id:</label>
<input type="text" id="id" th:field="*{id}"/><br/>
<label for="title">Title:</label>
<input type="text" id="title" th:field="*{title}" /><br/>
<label for="publisher">Publisher:</label>
<input type="text" id="publisher" th:field="*{publisher}" /><br/>
<label for="isbn">Isbn:</label>
<input type="text" id="isbn" th:field="*{isbn}" /><br/>
<label for="pages">Pages:</label>
<input type="text" id="pages" th:field="*{pages}" /><br/>
<label for="year">Year:</label>
<input type="number" id="year" th:field="*{year}" /><br/>
<button type="submit">Add Book</button>
</form>
</body>
</html>
 
ListBooks.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<title>Book List</title>
</head>
<body>
<h1>Book List</h1>
<table border="1">
<tr>
<th>Id</th>
<th>Title</th>
<th>Publisher</th>
<th>Isbn</th>
<th>Pages</th>
<th>Year</th>
<th>Edit</th>
<th>Delete</th>
</tr>
<tbody>
<tr th:each="book : ${books}">
<td th:text="${book.id}"></td>
<td th:text="${book.title}"></td> 
<td th:text="${book.publisher}"></td>
<td th:text="${book.isbn}"></td>
<td th:text="${book.pages}"></td>
<td th:text="${book.year}"></td>
<td><a th:href="@{/editBook/{id}(id=${book.id})}">Edit</a></td>
<td> <a th:href="@{/deleteBook/{id}(id=${book.id})}">Delete</a></td>
</tr>
</tbody>
</table>
</body>
</html>
 
UpdateBook.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<title>Edit Book</title>
</head>
<body>
<h1>Edit Book</h1>
<form action="#" th:action="@{/editBook}" th:object="${bookDetails}" method="post">
<input type="hidden" th:field="*{id}" />
<label for="title">Title:</label>
<input type="text" id="title" th:field="*{title}" /><br/>
<label for="publisher">Publisher:</label>
<input type="text" id="publisher" th:field="*{publisher}" /><br/>
<label for="isbn">Isbn:</label>
<input type="text" id="isbn" th:field="*{isbn}" /><br/>
<label for="pages">Pages:</label>
<input type="text" id="pages" th:field="*{pages}" /><br/>
<label for="year">Year:</label>
<input type="number" id="year" th:field="*{year}" /><br/>
<button type="submit">Update Book</button>
</form>
</body>
</html>
 
BookController.java
package com.mph.PractiseQue3;
 
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
 
 
 
@Controller
public class BookController {
@Autowired
private BookRepository repo;
@GetMapping("/addbook")
public String addbookform(Model model) {
model.addAttribute("bookDetails", new Book_Details());
return "AddBook";
}
 
@PostMapping("/addBook")
public String addBook(@ModelAttribute Book_Details bookDetails) {
repo.save(bookDetails);
return "redirect:/books";
}
 
@GetMapping("/books")
public String listBooks(Model model) {
model.addAttribute("books", repo.findAll());
return "ListBooks";
}
@GetMapping("/editBook/{id}")
public String showEditBookForm(@PathVariable("id") int id, Model model) {
Book_Details bookDetails = repo.findById(id).orElseThrow(() -> new IllegalArgumentException("Invalid book Id:" + id));
model.addAttribute("bookDetails", bookDetails);
return "UpdateBook";
}
 
@PostMapping("/editBook")
public String editBook(@ModelAttribute Book_Details bookDetails) {
repo.save(bookDetails);
return "redirect:/books";
}
 
@GetMapping("/deleteBook/{id}")
public String deleteBook(@PathVariable("id") int id) {
Book_Details bookDetails = repo.findById(id).orElseThrow(() -> new IllegalArgumentException("Invalid book Id:" + id));
repo.delete(bookDetails);
return "redirect:/books";
}
} 

--------------------------------------------------------------------------------------------------------------------------------------------

PS -2


Create Spring Boot Microservice with Spring Data JPA 
 pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
<modelVersion>4.0.0</modelVersion>
<parent>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-parent</artifactId>
<version>3.2.8</version>
<relativePath/> <!-- lookup parent from repository -->
</parent>
<groupId>com.springboot</groupId>
<artifactId>SpringBootPracticeExercise</artifactId>
<version>0.0.1-SNAPSHOT</version>
<name>SpringBootPracticeExercise</name>
<description>Demo project for Spring Boot</description>
<url/>
<licenses>
<license/>
</licenses>
<developers>
<developer/>
</developers>
<scm>
<connection/>
<developerConnection/>
<tag/>
<url/>
</scm>
<properties>
<java.version>11</java.version>
</properties>
<dependencies>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-web</artifactId>
</dependency>
 
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-devtools</artifactId>
<scope>runtime</scope>
<optional>true</optional>
</dependency>
<dependency>
<groupId>com.mysql</groupId>
<artifactId>mysql-connector-j</artifactId>
<scope>runtime</scope>
</dependency>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-test</artifactId>
<scope>test</scope>
</dependency>
</dependencies>
 
<build>
<plugins>
<plugin>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-maven-plugin</artifactId>
</plugin>
</plugins>
</build>
 
</project>
 
Book.java
package com.springboot.SpringBootPracticeExercise;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
 
@Entity
@Table(name="book_details")
public class Book {
 
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private int id;
private String bookTitle;
private String bookPublisher;
private String bookIsbn;
private int bookNumberOfPages;
private int bookYear;
 
public int getId() {
return id;
}
 
public void setId(int id) {
this.id = id;
}
 
public String getBookTitle() {
return bookTitle;
}
 
public void setBookTitle(String bookTitle) {
this.bookTitle = bookTitle;
}
 
public String getBookPublisher() {
return bookPublisher;
}
 
public void setBookPublisher(String bookPublisher) {
this.bookPublisher = bookPublisher;
}
 
public String getBookIsbn() {
return bookIsbn;
}
 
public void setBookIsbn(String bookIsbn) {
this.bookIsbn = bookIsbn;
}
 
public int getBookNumberOfPages() {
return bookNumberOfPages;
}
 
public void setBookNumberOfPages(int bookNumberOfPages) {
this.bookNumberOfPages = bookNumberOfPages;
}
 
public int getBookYear() {
return bookYear;
}
 
public void setBookYear(int bookYear) {
this.bookYear = bookYear;
}
 
}
 
BookRepository.java
package com.springboot.SpringBootPracticeExercise;
import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.web.bind.annotation.PathVariable;
public interface BookRepository extends JpaRepository<Book, Integer> {
 
Book findByBookTitle(@PathVariable String title);
List<Book> findByBookPublisherLike(@PathVariable String publisher);
List<Book> findByBookYear(@PathVariable int year);
}

 
BookStoreRestController.java
package com.springboot.SpringBootPracticeExercise;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
 
@RestController
@RequestMapping("books")
public class BookStoreRestController {
 
@Autowired
BookStoreService bs;
 
@Autowired
BookRepository repo;
 
@PostMapping
public Book addBook(@RequestBody Book book) {
// TODO Auto-generated method stub
return bs.addBook(book);
}
 
@PutMapping("/{id}")
public Book updateBook(@PathVariable int id, @RequestBody Book updatedBook) {
// TODO Auto-generated method stub
return bs.updateBook(id, updatedBook);
}
 
@GetMapping
public List<Book> findAllBooks() {
// TODO Auto-generated method stub
return bs.findAllBooks();
}
 
@GetMapping("/book/{book_id}")
public Optional<Book> findAllByBookId(@PathVariable int book_id) {
// TODO Auto-generated method stub
return bs.findAllByBookId(book_id);
}
 
@DeleteMapping("/{book_id}")
public void deleteBook(@PathVariable int book_id) {
// TODO Auto-generated method stub
bs.deleteBook(book_id);
}
 
@GetMapping("/title/{book_title}")
public Book findByBookTitle(@PathVariable String book_title) {
// TODO Auto-generated method stub
return bs.findByBookTitle(book_title);
}
 
@GetMapping("/publisher/{book_publisher}")
public List<Book> findByBookPublisherLike(@PathVariable String book_publisher) {
// TODO Auto-generated method stub
return bs.findByBookPublisherLike(book_publisher);
}
 
@GetMapping("/year/{book_year}")
public List<Book> findByYear(@PathVariable int book_year) {
// TODO Auto-generated method stub
return bs.findByBookYear(book_year);
}
 
} 
 
BookStoreService.java
package com.springboot.SpringBootPracticeExercise;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
 
@Service
public class BookStoreService {
 
@Autowired
BookRepository repo;
 
public Book addBook(@RequestBody Book book) {
// TODO Auto-generated method stub
return repo.save(book);
}
 
public Book updateBook(@PathVariable int id, @RequestBody Book updatedBook) {
// TODO Auto-generated method stub
if(repo.existsById(id)) {
updatedBook.setId(id);
return repo.save(updatedBook);
}
return null;
}
 
public List<Book> findAllBooks() {
// TODO Auto-generated method stub
return repo.findAll();
}
 
public Optional<Book> findAllByBookId(@PathVariable int book_id) {
// TODO Auto-generated method stub
return repo.findById(book_id);
}
 
public void deleteBook(@PathVariable int book_id) {
// TODO Auto-generated method stub
repo.deleteById(book_id);
}
 
public Book findByBookTitle(@PathVariable String book_title) {
// TODO Auto-generated method stub
return repo.findByBookTitle(book_title);
}
 
public List<Book> findByBookPublisherLike(@PathVariable String book_publisher) {
// TODO Auto-generated method stub
return repo.findByBookPublisherLike(book_publisher);
}
 
public List<Book> findByBookYear(@PathVariable int book_year) {
// TODO Auto-generated method stub
return repo.findByBookYear(book_year);
}} 
application.properties
spring.application.name=SpringBootPracticeExercise
server.port=8090
spring.datasource.url=jdbc:mysql://localhost:3306/practice_db
spring.datasource.username=root
spring.datasource.password=Password@12
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true 
 
SpringBookPraticeExerciseApplication.java
package com.springboot.SpringBootPracticeExercise;
 
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
 
@SpringBootApplication
public class SpringBootPracticeExerciseApplication {
 
public static void main(String[] args) {
SpringApplication.run(SpringBootPracticeExerciseApplication.class, args);
}
 } 



